import numpy as np
import warnings
from collections import defaultdict

warnings.filterwarnings("ignore")


def smoothing(locations_all, alpha=0.33):
    """
    from "CURVE AND SURFACE SMOOTHING WITHOUT SHRINKAGE"
    :param locations_all: locations of all triangle
    :param alpha: scale factor
    :return: locations after smoothing
    """
    neighbor = defaultdict(list)
    positions = dict()

    # 找到各点所在的所有三角形中的邻点
    for triangle in locations_all:
        for i, point in enumerate(triangle[:-1]):
            neighbor[point].extend([p for j, p in enumerate(triangle[:-1]) if i != j])

    # 对找到的邻点坐标利用高斯平滑做加权平均，并以之为目标，平移 alpha 倍
    for p in neighbor:
        weights = (1 / 2 * np.pi) * np.exp(-np.sum(np.square(neighbor[p] - np.array(p)), axis=1) / 2)
        weights = weights / np.sum(weights)
        positions[p] = tuple(
            np.array(p) + alpha * ((neighbor[p] - np.array(p)) * np.expand_dims(weights, 1)).sum(axis=0))
    # 重构各点坐标
    for triangle in locations_all:
        triangle[:3] = [positions[p] for p in triangle[:-1]]

    return locations_all


def array_split(data, step, axis):
    """
    由于切分后相邻两块都包含边界值，所以不能使用numpy.array_split
    :param data: N-D numpy.ndarray
    :param step: 切分为几份
    :param axis: 切分维度
    :return: 切分得到的step个子集组成的列表 [data1, data2, ...]
    """
    # 将未知的 axis 交换到第 0 维， 方便计算
    data = np.swapaxes(data, 0, axis)

    # 计算切分点
    rs = np.linspace(0, data.shape[0], step + 1, dtype=int)
    res = []
    for i in range(len(rs) - 1):
        # 每次取两个切分点之间的部分 data, 并还原axis分布
        res.append(np.swapaxes(data[rs[i]:rs[i + 1] + 1], 0, axis))
    return res


def split_data(data, steps, dim=0):
    """
    递归沿各维度切分
    :param data: N-D numpy.ndarray
    :param steps: list 各维度需要切成的份数
    :param dim: 切分维度
    :return: 沿各维度切分得到的子集组成的嵌套列表
    Ex: steps=[2, 2, 2], return: [[[data111,data112], [data121,data122]], [[data111,data112], [data121,data122]]]
    """
    # 最高维度
    dim_bound = len(data.shape)
    if dim == dim_bound:
        return data
    # 若未达到 dim_bound 则继续切分下一维度
    return [split_data(x, steps, dim=dim + 1) for x in array_split(data, steps[dim], axis=dim)]


def get_data_cord(data, cord):
    """
    根据坐标读取数据 N维数据
    :param data: N-D numpy.ndarray
    :param cord: [N,]
    :return:
    """
    for c in cord:
        data = data[c]
    return data


class logger(object):
    """
    a logger to print both in terminal and GUI
    """

    def __init__(self, box=None):
        # GUI textbrowser
        self.box = box

    def info(self, message):
        print(message)
        if self.box:
            # self.box.append('*****************************')
            self.box.append(message)
            # self.box.append('*****************************')


def interpolate_linear(vertices, cords, threshold, center):
    """
    2个点根据强度线性插值，得到 threshold 处坐标
    :param vertices: 强度数据 (2,)
    :param cords: 坐标矩阵 (D, 2)
    :param threshold:  阈值
    :return: threshold 处坐标
    """
    # 计算两个点的权重
    w = np.abs(vertices - threshold)[::-1]
    # 处理特殊情况：输入两个点均等于 threshold
    if w.sum() == 0:
        w = np.ones_like(w)
    w = w / w.sum()
    # 根据权重加权两个点的位置
    return tuple((w[None] * cords).sum(axis=-1) - center)


def ndmesh(*args):
    """
    numpy.meshgrid 多维版本, ref: https://stackoverflow.com/questions/1827489/numpy-meshgrid-in-3d
    :param args:
    :return:  多维坐标矩阵
    """
    args = map(np.asarray, args)
    return np.broadcast_arrays(*[x[(slice(None),) + (None,) * i] for i, x in enumerate(args)])


# 帮助
helpInformation = """***************************************HELP**************************************

You can simply move the threshold slider or the resolution slider to modify the paramter of our MarchingCubes algorithm, and the items in the menu have the following effects
File->load : load nii format data.
Demo->MC Varying threshold : demo for MarchingfCubes varying threshold
Demo->MC Varying cubesize : demo for MarchingfCubes varying cubesize
Demo->MCSmooth Varying threshold : demo for MarchingfCubesSmooth varying threshold
Demo->MCSmooth Varying cubesize : demo for MarchingfCubesSmooth varying cubesize
Demo->MT Varying threshold : demo for MarchingfTetras varying threshold
Demo->MT Varying cubesize : demo for MarchingfTetras varying cubesize
Demo->MTSmooth Varying threshold : demo for MarchingfTetrasSmooth varying threshold
Demo->MTSmooth Varying cubesize : demo for MarchingfTetrasSmooth varying cubesize
Operation->MarchingCubesSmooth : use Taubin's algorithm to make it smoother
Operation->MarchingCubesUnSmooth : undo the smooth step
Operation->MarchingTetrasSmooth : use Taubin's algorithm to make Tetras smoother
Operation->MarchingTetrasUnSmooth : undo the Tetras smooth step
Operation->Rotate : rotate for 360 degree
Reset->Reset model : reset the model to origin state
Reset->clear output : clear the output in the textbrowser
Help->help : print the help documentation
"""

# 边对应的顶点 (对 1,2,3维均相同)
edges2vertices = {
    0: [0, 1], 1: [1, 2], 2: [2, 3], 3: [0, 3], 4: [4, 5], 5: [5, 6], 6: [6, 7], 7: [7, 4],
    8: [0, 4], 9: [1, 5], 10: [3, 7], 11: [2, 6]
}

# 对 tetrahedron 边对应的顶点
tetra_edges2vertices = {
    0: [0, 1], 1: [0, 3], 2: [0, 2], 3: [1, 3], 4: [2, 3], 5: [1, 2]
}

# 用于二进制转十进制
arr = np.array([1, 2, 4, 8, 16, 32, 64, 128])

# 各维度所有情况的等值面顶点所在边
table = {1: [  # 一维共 4 种情况，2 种case
    [],  # 0 0  表示第 0 种情况 对应第 0 种 case
    [0],  # 1 1
    [0],  # 2 1
    []  # 3 0
],
    # 二维共 16 种情况，4 种case
    2: [
        [],  # 0 0
        [0, 3],  # 1 1
        [0, 1],  # 2 1
        [1, 3],  # 3 2
        [1, 2],  # 4 1
        [0, 3, 1, 2],  # 5 3
        [0, 2],  # 6 2
        [2, 3],  # 7 1
        [2, 3],  # 8 1
        [0, 2],  # 9 2
        [0, 1, 2, 3],  # 10 3
        [1, 2],  # 11 1
        [1, 3],  # 12 2
        [0, 1],  # 13 1
        [0, 3],  # 14 1
        [],  # 15 0
    ],
    # 三维共 256 种情况，15 种case  ref: https://github.com/CHINA-JIGE/MarchingCube/blob/master/MarchingCubes/MarchingCubes.cpp
    3: [
        [],  # 0 0
        [0, 3, 8],  # 1 1
        [0, 9, 1],  # 2 1
        [1, 3, 8, 9, 1, 8],  # 3 2
        [1, 11, 2],  # 4 1
        [0, 3, 8, 1, 11, 2],  # 5 3
        [9, 11, 2, 0, 9, 2],  # 6 2
        [2, 3, 8, 2, 8, 11, 11, 8, 9],  # 7 5
        [3, 2, 10],  # 8 1
        [0, 2, 10, 8, 0, 10],  # 9 2
        [1, 0, 9, 2, 10, 3],  # 10 3
        [1, 2, 10, 1, 10, 9, 9, 10, 8],  # 11 5
        [3, 1, 11, 10, 3, 11],  # 12 2
        [0, 1, 11, 0, 11, 8, 8, 11, 10],  # 13 5
        [3, 0, 9, 3, 9, 10, 10, 9, 11],  # 14 5
        [9, 11, 8, 11, 10, 8],  # 15 8
        [4, 8, 7],  # 16 1
        [4, 0, 3, 7, 4, 3],  # 17 2
        [0, 9, 1, 8, 7, 4],  # 18 3
        [4, 9, 1, 4, 1, 7, 7, 1, 3],  # 19 5
        [1, 11, 2, 8, 7, 4],  # 20 4
        [3, 7, 4, 3, 4, 0, 1, 11, 2],  # 21 7
        [9, 11, 2, 9, 2, 0, 8, 7, 4],  # 22 7
        [2, 9, 11, 2, 7, 9, 2, 3, 7, 7, 4, 9],  # 23 14
        [8, 7, 4, 3, 2, 10],  # 24 3
        [10, 7, 4, 10, 4, 2, 2, 4, 0],  # 25 5
        [9, 1, 0, 8, 7, 4, 2, 10, 3],  # 26 6
        [4, 10, 7, 9, 10, 4, 9, 2, 10, 9, 1, 2],  # 27 9
        [3, 1, 11, 3, 11, 10, 7, 4, 8],  # 28 7
        [1, 11, 10, 1, 10, 4, 1, 4, 0, 7, 4, 10],  # 29 11
        [4, 8, 7, 9, 10, 0, 9, 11, 10, 10, 3, 0],  # 30 12
        [4, 10, 7, 4, 9, 10, 9, 11, 10],  # 31 5
        [9, 4, 5],  # 32 1
        [9, 4, 5, 0, 3, 8],  # 33 3
        [0, 4, 5, 1, 0, 5],  # 34 2
        [8, 4, 5, 8, 5, 3, 3, 5, 1],  # 35 5
        [1, 11, 2, 9, 4, 5],  # 36 3
        [3, 8, 0, 1, 11, 2, 4, 5, 9],  # 37 6
        [5, 11, 2, 5, 2, 4, 4, 2, 0],  # 38 5
        [2, 5, 11, 3, 5, 2, 3, 4, 5, 3, 8, 4],  # 39 9
        [9, 4, 5, 2, 10, 3],  # 40 4
        [0, 2, 10, 0, 10, 8, 4, 5, 9],  # 41 7
        [0, 4, 5, 0, 5, 1, 2, 10, 3],  # 42 7
        [2, 5, 1, 2, 8, 5, 2, 10, 8, 4, 5, 8],  # 43 11
        [11, 10, 3, 11, 3, 1, 9, 4, 5],  # 44 7
        [4, 5, 9, 0, 1, 8, 8, 1, 11, 8, 11, 10],  # 45 12
        [5, 0, 4, 5, 10, 0, 5, 11, 10, 10, 3, 0],  # 46 14
        [5, 8, 4, 5, 11, 8, 11, 10, 8],  # 47 5
        [9, 8, 7, 5, 9, 7],  # 48 2
        [9, 0, 3, 9, 3, 5, 5, 3, 7],  # 49 5
        [0, 8, 7, 0, 7, 1, 1, 7, 5],  # 50 5
        [1, 3, 5, 3, 7, 5],  # 51 8
        [9, 8, 7, 9, 7, 5, 11, 2, 1],  # 52 7
        [11, 2, 1, 9, 0, 5, 5, 0, 3, 5, 3, 7],  # 53 12
        [8, 2, 0, 8, 5, 2, 8, 7, 5, 11, 2, 5],  # 54 11
        [2, 5, 11, 2, 3, 5, 3, 7, 5],  # 55 5
        [7, 5, 9, 7, 9, 8, 3, 2, 10],  # 56 7
        [9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 10, 7],  # 57 14
        [2, 10, 3, 0, 8, 1, 1, 8, 7, 1, 7, 5],  # 58 12
        [10, 1, 2, 10, 7, 1, 7, 5, 1],  # 59 5
        [9, 8, 5, 8, 7, 5, 11, 3, 1, 11, 10, 3],  # 60 10
        [5, 0, 7, 5, 9, 0, 7, 0, 10, 1, 11, 0, 10, 0, 11],  # 61 7
        [10, 0, 11, 10, 3, 0, 11, 0, 5, 8, 7, 0, 5, 0, 7],  # 62 7
        [10, 5, 11, 7, 5, 10],  # 63 2
        [11, 5, 6],  # 64 1
        [0, 3, 8, 5, 6, 11],  # 65 4
        [9, 1, 0, 5, 6, 11],  # 66 3
        [1, 3, 8, 1, 8, 9, 5, 6, 11],  # 67 7
        [1, 5, 6, 2, 1, 6],  # 68 2
        [1, 5, 6, 1, 6, 2, 3, 8, 0],  # 69 7
        [9, 5, 6, 9, 6, 0, 0, 6, 2],  # 70 5
        [5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2],  # 71 11
        [2, 10, 3, 11, 5, 6],  # 72 3
        [10, 8, 0, 10, 0, 2, 11, 5, 6],  # 73 7
        [0, 9, 1, 2, 10, 3, 5, 6, 11],  # 74 6
        [5, 6, 11, 1, 2, 9, 9, 2, 10, 9, 10, 8],  # 75 12
        [6, 10, 3, 6, 3, 5, 5, 3, 1],  # 76 5
        [0, 10, 8, 0, 5, 10, 0, 1, 5, 5, 6, 10],  # 77 14
        [3, 6, 10, 0, 6, 3, 0, 5, 6, 0, 9, 5],  # 78 9
        [6, 9, 5, 6, 10, 9, 10, 8, 9],  # 79 5
        [5, 6, 11, 4, 8, 7],  # 80 3
        [4, 0, 3, 4, 3, 7, 6, 11, 5],  # 81 7
        [1, 0, 9, 5, 6, 11, 8, 7, 4],  # 82 6
        [11, 5, 6, 1, 7, 9, 1, 3, 7, 7, 4, 9],  # 83 12
        [6, 2, 1, 6, 1, 5, 4, 8, 7],  # 84 7
        [1, 5, 2, 5, 6, 2, 3, 4, 0, 3, 7, 4],  # 85 10
        [8, 7, 4, 9, 5, 0, 0, 5, 6, 0, 6, 2],  # 86 12
        [7, 9, 3, 7, 4, 9, 3, 9, 2, 5, 6, 9, 2, 9, 6],  # 87 7
        [3, 2, 10, 7, 4, 8, 11, 5, 6],  # 88 6
        [5, 6, 11, 4, 2, 7, 4, 0, 2, 2, 10, 7],  # 89 12
        [0, 9, 1, 4, 8, 7, 2, 10, 3, 5, 6, 11],  # 90 13
        [9, 1, 2, 9, 2, 10, 9, 10, 4, 7, 4, 10, 5, 6, 11],  # 91 6
        [8, 7, 4, 3, 5, 10, 3, 1, 5, 5, 6, 10],  # 92 12
        [5, 10, 1, 5, 6, 10, 1, 10, 0, 7, 4, 10, 0, 10, 4],  # 93 7
        [0, 9, 5, 0, 5, 6, 0, 6, 3, 10, 3, 6, 8, 7, 4],  # 94 6
        [6, 9, 5, 6, 10, 9, 4, 9, 7, 7, 9, 10],  # 95 3
        [11, 9, 4, 6, 11, 4],  # 96 2
        [4, 6, 11, 4, 11, 9, 0, 3, 8],  # 97 7
        [11, 1, 0, 11, 0, 6, 6, 0, 4],  # 98 5
        [8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 11, 1],  # 99 14
        [1, 9, 4, 1, 4, 2, 2, 4, 6],  # 100 5
        [3, 8, 0, 1, 9, 2, 2, 9, 4, 2, 4, 6],  # 101 12
        [0, 4, 2, 4, 6, 2],  # 102 8
        [8, 2, 3, 8, 4, 2, 4, 6, 2],  # 103 5
        [11, 9, 4, 11, 4, 6, 10, 3, 2],  # 104 7
        [0, 2, 8, 2, 10, 8, 4, 11, 9, 4, 6, 11],  # 105 10
        [3, 2, 10, 0, 6, 1, 0, 4, 6, 6, 11, 1],  # 106 12
        [6, 1, 4, 6, 11, 1, 4, 1, 8, 2, 10, 1, 8, 1, 10],  # 107 7
        [9, 4, 6, 9, 6, 3, 9, 3, 1, 10, 3, 6],  # 108 11
        [8, 1, 10, 8, 0, 1, 10, 1, 6, 9, 4, 1, 6, 1, 4],  # 109 7
        [3, 6, 10, 3, 0, 6, 0, 4, 6],  # 110 5
        [6, 8, 4, 10, 8, 6],  # 111 2
        [7, 6, 11, 7, 11, 8, 8, 11, 9],  # 112 5
        [0, 3, 7, 0, 7, 11, 0, 11, 9, 6, 11, 7],  # 113 11
        [11, 7, 6, 1, 7, 11, 1, 8, 7, 1, 0, 8],  # 114 9
        [11, 7, 6, 11, 1, 7, 1, 3, 7],  # 115 5
        [1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6],  # 116 14
        [2, 9, 6, 2, 1, 9, 6, 9, 7, 0, 3, 9, 7, 9, 3],  # 117 7
        [7, 0, 8, 7, 6, 0, 6, 2, 0],  # 118 5
        [7, 2, 3, 6, 2, 7],  # 119 2
        [2, 10, 3, 11, 8, 6, 11, 9, 8, 8, 7, 6],  # 120 12
        [2, 7, 0, 2, 10, 7, 0, 7, 9, 6, 11, 7, 9, 7, 11],  # 121 7
        [1, 0, 8, 1, 8, 7, 1, 7, 11, 6, 11, 7, 2, 10, 3],  # 122 6
        [10, 1, 2, 10, 7, 1, 11, 1, 6, 6, 1, 7],  # 123 3
        [8, 6, 9, 8, 7, 6, 9, 6, 1, 10, 3, 6, 1, 6, 3],  # 124 7
        [0, 1, 9, 10, 7, 6],  # 125 4
        [7, 0, 8, 7, 6, 0, 3, 0, 10, 10, 0, 6],  # 126 3
        [7, 6, 10],  # 127 1
        [7, 10, 6],  # 128 1
        [3, 8, 0, 10, 6, 7],  # 129 3
        [0, 9, 1, 10, 6, 7],  # 130 4
        [8, 9, 1, 8, 1, 3, 10, 6, 7],  # 131 7
        [11, 2, 1, 6, 7, 10],  # 132 3
        [1, 11, 2, 3, 8, 0, 6, 7, 10],  # 133 6
        [2, 0, 9, 2, 9, 11, 6, 7, 10],  # 134 7
        [6, 7, 10, 2, 3, 11, 11, 3, 8, 11, 8, 9],  # 135 12
        [7, 3, 2, 6, 7, 2],  # 136 2
        [7, 8, 0, 7, 0, 6, 6, 0, 2],  # 137 5
        [2, 6, 7, 2, 7, 3, 0, 9, 1],  # 138 7
        [1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7],  # 139 14
        [11, 6, 7, 11, 7, 1, 1, 7, 3],  # 140 5
        [11, 6, 7, 1, 11, 7, 1, 7, 8, 1, 8, 0],  # 141 9
        [0, 7, 3, 0, 11, 7, 0, 9, 11, 6, 7, 11],  # 142 11
        [7, 11, 6, 7, 8, 11, 8, 9, 11],  # 143 5
        [6, 4, 8, 10, 6, 8],  # 144 2
        [3, 10, 6, 3, 6, 0, 0, 6, 4],  # 145 5
        [8, 10, 6, 8, 6, 4, 9, 1, 0],  # 146 7
        [9, 6, 4, 9, 3, 6, 9, 1, 3, 10, 6, 3],  # 147 11
        [6, 4, 8, 6, 8, 10, 2, 1, 11],  # 148 7
        [1, 11, 2, 3, 10, 0, 0, 10, 6, 0, 6, 4],  # 149 12
        [4, 8, 10, 4, 10, 6, 0, 9, 2, 2, 9, 11],  # 150 10
        [11, 3, 9, 11, 2, 3, 9, 3, 4, 10, 6, 3, 4, 3, 6],  # 151 7
        [8, 3, 2, 8, 2, 4, 4, 2, 6],  # 152 5
        [0, 2, 4, 4, 2, 6],  # 153 8
        [1, 0, 9, 2, 4, 3, 2, 6, 4, 4, 8, 3],  # 154 12
        [1, 4, 9, 1, 2, 4, 2, 6, 4],  # 155 5
        [8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 11],  # 156 14
        [11, 0, 1, 11, 6, 0, 6, 4, 0],  # 157 5
        [4, 3, 6, 4, 8, 3, 6, 3, 11, 0, 9, 3, 11, 3, 9],  # 158 7
        [11, 4, 9, 6, 4, 11],  # 159 2
        [4, 5, 9, 7, 10, 6],  # 160 3
        [0, 3, 8, 4, 5, 9, 10, 6, 7],  # 161 6
        [5, 1, 0, 5, 0, 4, 7, 10, 6],  # 162 7
        [10, 6, 7, 8, 4, 3, 3, 4, 5, 3, 5, 1],  # 163 12
        [9, 4, 5, 11, 2, 1, 7, 10, 6],  # 164 6
        [6, 7, 10, 1, 11, 2, 0, 3, 8, 4, 5, 9],  # 165 13
        [7, 10, 6, 5, 11, 4, 4, 11, 2, 4, 2, 0],  # 166 12
        [3, 8, 4, 3, 4, 5, 3, 5, 2, 11, 2, 5, 10, 6, 7],  # 167 6
        [7, 3, 2, 7, 2, 6, 5, 9, 4],  # 168 7
        [9, 4, 5, 0, 6, 8, 0, 2, 6, 6, 7, 8],  # 169 12
        [3, 2, 6, 3, 6, 7, 1, 0, 5, 5, 0, 4],  # 170 10
        [6, 8, 2, 6, 7, 8, 2, 8, 1, 4, 5, 8, 1, 8, 5],  # 171 7
        [9, 4, 5, 11, 6, 1, 1, 6, 7, 1, 7, 3],  # 172 12
        [1, 11, 6, 1, 6, 7, 1, 7, 0, 8, 0, 7, 9, 4, 5],  # 173 6
        [4, 11, 0, 4, 5, 11, 0, 11, 3, 6, 7, 11, 3, 11, 7],  # 174 7
        [7, 11, 6, 7, 8, 11, 5, 11, 4, 4, 11, 8],  # 175 3
        [6, 5, 9, 6, 9, 10, 10, 9, 8],  # 176 5
        [3, 10, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9],  # 177 9
        [0, 8, 10, 0, 10, 5, 0, 5, 1, 5, 10, 6],  # 178 14
        [6, 3, 10, 6, 5, 3, 5, 1, 3],  # 179 5
        [1, 11, 2, 9, 10, 5, 9, 8, 10, 10, 6, 5],  # 180 12
        [0, 3, 10, 0, 10, 6, 0, 6, 9, 5, 9, 6, 1, 11, 2],  # 181 6
        [10, 5, 8, 10, 6, 5, 8, 5, 0, 11, 2, 5, 0, 5, 2],  # 182 7
        [6, 3, 10, 6, 5, 3, 2, 3, 11, 11, 3, 5],  # 183 3
        [5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8],  # 184 11
        [9, 6, 5, 9, 0, 6, 0, 2, 6],  # 185 5
        [1, 8, 5, 1, 0, 8, 5, 8, 6, 3, 2, 8, 6, 8, 2],  # 186 7
        [1, 6, 5, 2, 6, 1],  # 187 2
        [1, 6, 3, 1, 11, 6, 3, 6, 8, 5, 9, 6, 8, 6, 9],  # 188 7
        [11, 0, 1, 11, 6, 0, 9, 0, 5, 5, 0, 6],  # 189 3
        [0, 8, 3, 5, 11, 6],  # 190 4
        [11, 6, 5],  # 191 1
        [10, 11, 5, 7, 10, 5],  # 192 2
        [10, 11, 5, 10, 5, 7, 8, 0, 3],  # 193 7
        [5, 7, 10, 5, 10, 11, 1, 0, 9],  # 194 7
        [11, 5, 7, 11, 7, 10, 9, 1, 8, 8, 1, 3],  # 195 10
        [10, 2, 1, 10, 1, 7, 7, 1, 5],  # 196 5
        [0, 3, 8, 1, 7, 2, 1, 5, 7, 7, 10, 2],  # 197 12
        [9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 10],  # 198 14
        [7, 2, 5, 7, 10, 2, 5, 2, 9, 3, 8, 2, 9, 2, 8],  # 199 7
        [2, 11, 5, 2, 5, 3, 3, 5, 7],  # 200 5
        [8, 0, 2, 8, 2, 5, 8, 5, 7, 11, 5, 2],  # 201 11
        [9, 1, 0, 5, 3, 11, 5, 7, 3, 3, 2, 11],  # 202 12
        [9, 2, 8, 9, 1, 2, 8, 2, 7, 11, 5, 2, 7, 2, 5],  # 203 7
        [1, 5, 3, 3, 5, 7],  # 204 8
        [0, 7, 8, 0, 1, 7, 1, 5, 7],  # 205 5
        [9, 3, 0, 9, 5, 3, 5, 7, 3],  # 206 5
        [9, 7, 8, 5, 7, 9],  # 207 2
        [5, 4, 8, 5, 8, 11, 11, 8, 10],  # 208 5
        [5, 4, 0, 5, 0, 10, 5, 10, 11, 10, 0, 3],  # 209 14
        [0, 9, 1, 8, 11, 4, 8, 10, 11, 11, 5, 4],  # 210 12
        [11, 4, 10, 11, 5, 4, 10, 4, 3, 9, 1, 4, 3, 4, 1],  # 211 7
        [2, 1, 5, 2, 5, 8, 2, 8, 10, 4, 8, 5],  # 212 11
        [0, 10, 4, 0, 3, 10, 4, 10, 5, 2, 1, 10, 5, 10, 1],  # 213 7
        [0, 5, 2, 0, 9, 5, 2, 5, 10, 4, 8, 5, 10, 5, 8],  # 214 7
        [9, 5, 4, 2, 3, 10],  # 215 4
        [2, 11, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8],  # 216 9
        [5, 2, 11, 5, 4, 2, 4, 0, 2],  # 217 5
        [3, 2, 11, 3, 11, 5, 3, 5, 8, 4, 8, 5, 0, 9, 1],  # 218 6
        [5, 2, 11, 5, 4, 2, 1, 2, 9, 9, 2, 4],  # 219 3
        [8, 5, 4, 8, 3, 5, 3, 1, 5],  # 220 5
        [0, 5, 4, 1, 5, 0],  # 221 2
        [8, 5, 4, 8, 3, 5, 9, 5, 0, 0, 5, 3],  # 222 3
        [9, 5, 4],  # 223 1
        [4, 7, 10, 4, 10, 9, 9, 10, 11],  # 224 5
        [0, 3, 8, 4, 7, 9, 9, 7, 10, 9, 10, 11],  # 225 12
        [1, 10, 11, 1, 4, 10, 1, 0, 4, 7, 10, 4],  # 226 11
        [3, 4, 1, 3, 8, 4, 1, 4, 11, 7, 10, 4, 11, 4, 10],  # 227 7
        [4, 7, 10, 9, 4, 10, 9, 10, 2, 9, 2, 1],  # 228 9
        [9, 4, 7, 9, 7, 10, 9, 10, 1, 2, 1, 10, 0, 3, 8],  # 229 6
        [10, 4, 7, 10, 2, 4, 2, 0, 4],  # 230 5
        [10, 4, 7, 10, 2, 4, 8, 4, 3, 3, 4, 2],  # 231 3
        [2, 11, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4],  # 232 14
        [9, 7, 11, 9, 4, 7, 11, 7, 2, 8, 0, 7, 2, 7, 0],  # 233 7
        [3, 11, 7, 3, 2, 11, 7, 11, 4, 1, 0, 11, 4, 11, 0],  # 234 7
        [1, 2, 11, 8, 4, 7],  # 235 4
        [4, 1, 9, 4, 7, 1, 7, 3, 1],  # 236 5
        [4, 1, 9, 4, 7, 1, 0, 1, 8, 8, 1, 7],  # 237 3
        [4, 3, 0, 7, 3, 4],  # 238 2
        [4, 7, 8],  # 239 1
        [9, 8, 11, 11, 8, 10],  # 240 8
        [3, 9, 0, 3, 10, 9, 10, 11, 9],  # 241 5
        [0, 11, 1, 0, 8, 11, 8, 10, 11],  # 242 5
        [3, 11, 1, 10, 11, 3],  # 243 2
        [1, 10, 2, 1, 9, 10, 9, 8, 10],  # 244 5
        [3, 9, 0, 3, 10, 9, 1, 9, 2, 2, 9, 10],  # 245 3
        [0, 10, 2, 8, 10, 0],  # 246 2
        [3, 10, 2],  # 247 1
        [2, 8, 3, 2, 11, 8, 11, 9, 8],  # 248 5
        [9, 2, 11, 0, 2, 9],  # 249 2
        [2, 8, 3, 2, 11, 8, 0, 8, 1, 1, 8, 11],  # 250 3
        [1, 2, 11],  # 251 1
        [1, 8, 3, 9, 8, 1],  # 252 2
        [0, 1, 9],  # 253 1
        [0, 8, 3],  # 254 1
        []  # 255 0
    ]
}

table2 = {3: [  # 三维共 16 种情况，3 种case
    [],  # 0 0 [0000]
    [0, 1, 2],  # 1 1 [1000]
    [0, 3, 5],  # 2 1 [0100]
    [1, 2, 3, 2, 3, 5],  # 3 2 [1100]
    [2, 4, 5],  # 4 1 [0010]
    [0, 1, 5, 1, 4, 5],  # 5 2 [1010]
    [0, 3, 4, 0, 2, 4],  # 6 2 [0110]
    [1, 3, 4],  # 7 1 [1110]
    [1, 3, 4],  # 8 1 [0001]
    [0, 2, 3, 2, 3, 4],  # 9 2 [1001]
    [0, 1, 5, 1, 4, 5],  # 10 2 [0101]
    [2, 4, 5],  # 11 3 [1101]
    [1, 2, 3, 2, 3, 5],  # 12 2 [0011]
    [0, 3, 5],  # 13 1 [1011]
    [0, 1, 2],  # 14 1 [0111]
    [],  # 15 0 [1111]
]}
